AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ""

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  DomainCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: steven-sg.com
      SubjectAlternativeNames:
        - auth.steven-sg.com
      ValidationMethod: DNS
  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: beta-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      AliasAttributes:
        - email
  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - email
        - openid
      ClientName: beta-client
      CallbackURLs:
        - https://steven-sg.com
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref CognitoUserPool
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      CustomDomainConfig:
        CertificateArn: arn:aws:acm:us-east-1:701812189816:certificate/c80ed540-aa4e-4643-94f7-9d1a134749a1
      UserPoolId: !Ref CognitoUserPool
      Domain: "auth.steven-sg.com"
  Route53HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: steven-sg.com
  Route53DomainAliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref Route53HostedZone
      Name: auth.steven-sg.com
      ResourceRecords:
        - d3f1t0kbnbj7ey.cloudfront.net
      Type: CNAME
      TTL: 300
  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectId}-lambda-authorizer
      Handler: src/lambda/authorizer_handler.handler
      Runtime: nodejs14.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        DefaultAuthorizer: DefaultCognitoLambdaAuthorizer
        Authorizers:
          DefaultCognitoLambdaAuthorizer:
            FunctionArn:
              Fn::GetAtt:
                - LambdaAuthorizer
                - Arn
            Identity:
              Header: Cookie
              ValidationExpression: ".*id_token=.*"
      Domain:
        CertificateArn: !Ref DomainCertificate
        DomainName: steven-sg.com
        Route53:
          HostedZoneId: !Ref Route53HostedZone
      StageName: Prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: openapi.yaml
  GetHelloWorld:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetHelloWorld"
      Handler: index.get
      Runtime: nodejs14.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
  LoginLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectId}-lambda-Login
      Handler: src/lambda/login_handler.get
      Runtime: nodejs14.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: ApiGatewayApi
  StatisticsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${ProjectId}-lambda-statistics
      Handler: src/lambda/statistics_handler.get
      Runtime: nodejs14.x
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /statistics
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "CodeStar-${ProjectId}-Execution${Stage}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary"
  QuickSightEmbeddedAccessRole:
    Description: Access role for anonymous QuickSight usage
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectId}-${Stage}-QuickSight-access"
      RolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - quicksight:GetDashboardEmbedUrl
              - quickSight:GetAnonymousUserEmbedUrl
            Resource: *
